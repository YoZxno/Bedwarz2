function KillSelf()

    if lPlayer:isAlive() then
        lPlayer:kill()
        task.wait(.1)
        GetService("vim"):SendKeyEvent(true, "W", false, game)
        task.wait(.2)
        GetService("vim"):SendKeyEvent(false, "W", false, game)
    end
end

if not workspace:FindFirstChild("Map") then return end


function GetMagnitude(block1, block2)
    if block1 and block2 then
        local pos1 = block1.Position
        local pos2 = block2.Position
        return (pos2 - pos1).Magnitude
    end
end


local function isPlayerNearby(radius)
    radius = radius or 18
    -- Get the position of the local player
    local localPlayerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

    -- Initialize variables to track the closest player and its distance
    local closestPlayer = nil
    local closestDistance = math.huge -- Start with a very large value

    -- Loop through all the players in the game
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Team ~= lPlayer.Team and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local playerPosition = player.Character.HumanoidRootPart.Position
            local distance = (playerPosition - localPlayerPosition).magnitude

            if distance <= radius and distance < closestDistance then
                closestPlayer = player
                closestDistance = distance
            end
        end
    end

    return closestPlayer
end

    local amt = 0;
    for i,v in pairs(workspace:GetChildren()) do
        if v.Name == 'bed' and v:FindFirstChild("BedHitbox") then
            amt += 1
        end
    end
    return amt
end)

local numBeds = 2;

spawn(function()
repeat task.wait(0.2)
numBeds = CountBeds()
until nil
end)

local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

function GetClosestBed()
    local nearestBed = nil
    local minDistance = math.huge

for i,v in pairs(game:GetService("Workspace").Beds:GetDescendants()) do
    if v.Name == "BedHitbox" ~=lPlayer.TeamColor then
        wait(1)
        getgenv().killed = {}
function DoTween(where2, mode)
	task.wait(0.1)
    local tweenComp = false
    local tween
    if mode == 'bed' then
    tween = TweenService:Create(lPlayer.Character:FindFirstChild("HumanoidRootPart"), TweenInfo.new(TweenSpeed, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {-- Enum.EasingStyle.Linear, Enum.EasingDirection.Out
        CFrame = where2.CFrame * CFrame.new(0,5,0)
    });
else
    tween = TweenService:Create(lPlayer.Character:FindFirstChild("HumanoidRootPart"), TweenInfo.new(TweenSpeed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
        CFrame = where2.CFrame * CFrame.new(0,0,-1)
    });
    --- -, Enum.EasingStyle.Linear, Enum.EasingDirection.Out
    end
    tween:Play();
    local normal = Enum.CameraType.Custom;
    local scriptable = Enum.CameraType.Scriptable
    local camera = workspace.CurrentCamera
    camera.CameraType = scriptable
    local leftRotation = CFrame.Angles(0, math.rad(-90), 0)
    local rotatedLeftCFrame = camera.CFrame * leftRotation

    -- Set the camera to the left rotated CFrame
    camera.CFrame = rotatedLeftCFrame

    local rightRotation = CFrame.Angles(0, math.rad(90), 0)
    local rotatedRightCFrame = rightRotation
    print("sad")
    camera.CameraType = normal
    tween.Completed:Wait(.1)
    tweenComp = true
    if mode == 'bed' then

        local oldPos = TargBed():FindFirstChild("BedHitbox").CFrame
        
        if lPlayer:isAlive() and GetMagnitude(lPlayer.Character:FindFirstChild("HumanoidRootPart"), TargBed()) > 10 and tweenComp then -- if the tween lags u back or fails then we kill the player and retry
            KillSelf()
        end
        repeat
        task.wait()
        if lPlayer:isAlive() and lPlayer.Character and lPlayer.Character:FindFirstChild("HumanoidRootPart") and GetMagnitude(lPlayer.Character:FindFirstChild("HumanoidRootPart"), TargBed()) > 10 and tweenComp then -- if the tween lags u back or fails then we kill the player and retry
            KillSelf()
        end
        until where2 == nil or where2.Parent ~= game:GetService("Workspace") or where2.Parent == nil or not where2:FindFirstChild("Covers") or where2.Covers.CFrame ~= oldPos or not lPlayer:isAlive()

        if isPlayerNearby(20) then
            local plr = isPlayerNearby(20)
            print(plr.Name)
            local oldTeam = plr.Team
            local oldTeamColor = plr.TeamColor;
            local lol = TweenService:Create(lPlayer.Character:FindFirstChild("HumanoidRootPart"), TweenInfo.new(.16, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
                CFrame = plr.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,1)
            })
            lol:Play();
            lol.Completed:Wait()
            repeat task.wait()
            local thisTween
            thisTween = TweenService:Create(lPlayer.Character:FindFirstChild("HumanoidRootPart"), TweenInfo.new(.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
                CFrame = plr.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,1)
            })
            thisTween:Play()
            thisTween.Completed:Wait()
            if GetMagnitude(lPlayer.Character:FindFirstChild("HumanoidRootPart"), plr.Character.HumanoidRootPart) > 30 then -- if the tween lags u back or fails then we kill the player and retry
                KillSelf()
            end
            thisTween = nil
            
            task.wait(.1)
            until plr.Team ~= oldTeam or plr.TeamColor ~= oldTeamColor or not lPlayer:isAlive(plr)
            table.insert(killed, plr.Name)
        end
        KillSelf()
    end
    tween = nil
end
    end
end
task.wait(0.3)
repeat wait()
for i,v in pairs(game:GetService("Players"):GetChildren()) do
    if v.Name ~= game.Players.LocalPlayer.Name and v.Character and v.Team ~= game.Players.LocalPlayer.Team then
        for i=1,5 do
            wait(0.9)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Character:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(-3,2,-3)
        end
    end
end
until nil
